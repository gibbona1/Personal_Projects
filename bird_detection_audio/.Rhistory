scale_fill_grey(name   = "Amplitude\n(dB)\n",
colors = grey.colors(6),
limits = c(-96,96),
na.value = sel_col[1]) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0),
breaks = y_breaks,
labels = paste0(y_breaks, "kHz")
) +
hot_theme_grid
spec_plot <- ggplot(df) +
geom_raster(aes(x    = time,
y    = frequency,
fill = amplitude),
interpolate = TRUE
) +
xlab("Time (s)") +
ylab("Frequency (kHz)") +
scale_fill_gradientn(name   = "Amplitude\n(dB)\n",
colors = grey.colors(6),
limits = c(-96,96),
na.value = sel_col[1]) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0),
breaks = y_breaks,
labels = paste0(y_breaks, "kHz")
) +
hot_theme_grid
spec_plot + theme_void() + theme(legend.position = "none")
spec_plot <- ggplot(df) +
geom_raster(aes(x    = time,
y    = frequency,
fill = amplitude),
interpolate = TRUE
) +
xlab("Time (s)") +
ylab("Frequency (kHz)") +
scale_fill_gradientn(name   = "Amplitude\n(dB)\n",
colors = grey.colors(6, start=0.1, end=0.95),
limits = c(-96,96),
na.value = sel_col[1]) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0),
breaks = y_breaks,
labels = paste0(y_breaks, "kHz")
) +
hot_theme_grid
spec_plot + theme_void() + theme(legend.position = "none")
library(tuneR)
library(seewave)
library(ggplot2)
spec <- spectro(tmp_audio,
f        = tmp_audio@samp.rate,
wl       = params$window_width,
ovlp     = params$fft_overlap,
fastdisp = TRUE,
plot     = FALSE,
db       = NULL,
complex  = TRUE,
noisereduction = NULL)
spec$amp[1:5,1:5]
Mod(spec$amp[1:5,1:5])
df   <- data.frame(time      = rep(spec$time, each  = nrow(spec$amp)),
frequency = rep(spec$freq, times = ncol(spec$amp)),
amplitude = as.vector(Mod(spec$amp)),
amp_im    = as.vector(Im(spec$amp)),
amp_re    = as.vector(Re(spec$amp)))
hot_theme_grid <- theme(panel.grid.major.y = element_line(color = "black", linetype = "dotted"),
panel.grid.major.x = element_blank(),
panel.grid.minor   = element_blank(),
panel.background   = element_rect(fill = "transparent"),
panel.border       = element_rect(linetype = "solid", fill = NA, color = "grey"),
axis.line          = element_blank(),
legend.position    = 'none',
plot.background    = element_rect(fill = "black"),
plot.margin        = margin(0.2,0.9,0.25,0, "lines"),
axis.title         = element_blank(),
axis.text.y        = element_text(size = 14, color = "grey", family = "mono"),
axis.text.x        = element_blank(),
axis.ticks         = element_line(color = "grey"),
axis.ticks.x       = element_blank())
virpluscols <- c("#000000", "#440154FF", "#3B528BFF", "#21908CFF", "#5DC863FF", "#FDE725FF", "#ff0000")
palette_list <- c("viridisplus", "magma", "inferno", "plasma",
"viridis", "cividis", "rocket", "mako", "turbo")
palette_cols <- function(pal_name, n=6){
if(pal_name == "viridisplus")
return(virpluscols)
else
return(viridis(n, option = pal_name))
}
sel_col <- palette_cols('viridisplus')
y_breaks <- pretty(df$frequency, 5)
spec_plot <- ggplot(df) +
geom_raster(aes(x    = time,
y    = frequency,
fill = amplitude),
interpolate = TRUE
) +
xlab("Time (s)") +
ylab("Frequency (kHz)") +
scale_fill_gradientn(name   = "Amplitude\n(dB)\n",
colors = grey.colors(6, start=0.1, end=0.95),
limits = c(-96,96),
na.value = sel_col[1]) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0),
breaks = y_breaks,
labels = paste0(y_breaks, "kHz")
) +
hot_theme_grid
spec_plot + theme_void() + theme(legend.position = "none")
shiny::runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
library(tuneR)
library(seewave)
library(ggplot2)
library(gganimate)
#dir('GitHub/audio_labeller')
tmp_audio <- readWave('GitHub/audio_labeller/www/tmp.wav')
source('GitHub/audio_labeller/spectrogram_params.R')
folder1 <- "C:\\Users\\Anthony\\Downloads\\Richfield_18112021"
folder2 <- "C:\\Users\\Anthony\\Downloads\\Richfield_01122021"
folder3 <- "C:\\Users\\Anthony\\Downloads\\Richfield_15122021"
ultrasonic_sub <- "Data"
acoustic_sub   <- "Data2"
list.files(folder1)
library(tuneR)
get_folder_info <- function(folder, subf){
errors_list <- c()
tmp_df      <- data.frame(
fname     = c(),
folder    = c(),
subfolder = c(),
length    = c(),
samp_rate = c())
for(f in list.files(file.path(folder, subf))){
fname   <- file.path(folder, subf, f)
tmp_wav <- try(readWave(fname))
if(inherits(tmp_wav, "try-error")){
errors_list <- c(errors_list, fname)
next
}
tmp_df <- rbind(tmp_df, data.frame(
fname     = fname,
folder    = folder,
subfolder = subf,
length    = length(tmp_wav),
samp_rate = tmp_wav@samp.rate))
}
return(list(file_df = tmp_df, errors_list = errors_list))
}
f1_ultrasonic <- get_folder_info(folder1, ultrasonic_sub)
f1_acoustic   <- get_folder_info(folder1, acoustic_sub)
f2_ultrasonic <- get_folder_info(folder2, ultrasonic_sub)
f2_acoustic   <- get_folder_info(folder2, acoustic_sub)
f3_ultrasonic <- get_folder_info(folder3, ultrasonic_sub)
f3_acoustic   <- get_folder_info(folder3, acoustic_sub)
tmp_df <- f1_ultrasonic$file_df
tmp_df$length / tmp_df$samp_rate
range(tmp_df$length / tmp_df$samp_rate)
length(tmp_df$length / tmp_df$samp_rate)
all_errors
all_errors <- c(f1_ultrasonic$errors_list,
f1_acoustic$errors_list,
f2_ultrasonic$errors_list,
f2_acoustic$errors_list,
f3_ultrasonic$errors_list,
f3_acoustic$errors_list)
all_errors
tmp_df <- f1_ultrasonic$file_df
range(tmp_df$length / tmp_df$samp_rate)
length(tmp_df$length / tmp_df$samp_rate)
tmp_df <- f1_acoustic$file_df
range(tmp_df$length / tmp_df$samp_rate)
length(tmp_df$length / tmp_df$samp_rate)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(range(tmp_df$length / tmp_df$samp_rate))
print(length(tmp_df$length / tmp_df$samp_rate))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(range(tmp_df$length / tmp_df$samp_rate))
print(length(tmp_df$length / tmp_df$samp_rate))
}
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", range(tmp_df$length / tmp_df$samp_rate)))
print(length("Number of files:", tmp_df$length / tmp_df$samp_rate))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", range(tmp_df$length / tmp_df$samp_rate)))
print(length("Number of files:", tmp_df$length / tmp_df$samp_rate))
}
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", range(tmp_df$length / tmp_df$samp_rate)))
print(length("Number of files:", tmp_df$length / tmp_df$samp_rate))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", range(tmp_df$length / tmp_df$samp_rate)))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
}
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", range(tmp_df$length / tmp_df$samp_rate)))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", range(tmp_df$length / tmp_df$samp_rate)))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
}
print_wavfile_info(f1_ultrasonic, f1_acoustic)
folder1
strsplit(folder1)
str_split(folder1)
stringr::str_split(folder1)
stringr::str_split(folder1, '\\')
stringr::str_split(folder1, '/')
stringr::str_split(folder1, '\\')
.Platform$file.sep
stringr::str_split(folder1, .Platform$file.sep)
stringr::str_split(folder1, '/')
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", range(tmp_df$length / tmp_df$samp_rate)))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", range(tmp_df$length / tmp_df$samp_rate)))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", paste0(range(tmp_df$length / tmp_df$samp_rate)), sep='-'))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", paste0(range(tmp_df$length / tmp_df$samp_rate)), sep='-'))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", paste0(range(tmp_df$length / tmp_df$samp_rate)), sep='-'))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", paste0(range(tmp_df$length / tmp_df$samp_rate)), collapse='-'))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", paste0(range(tmp_df$length / tmp_df$samp_rate), collapse='-')))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", paste0(range(tmp_df$length / tmp_df$samp_rate), collapse='-')))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate), 2), collapse='-')))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate), 2), collapse='-')))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
print("Ultrasonic: ")
print(paste0("range (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
print("Acoustic: ")
tmp_df <- f1_acoustic$file_df
print(paste0("range (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
print(paste0("Number of files:", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
cat("Ultrasonic: ")
cat(paste0("range (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("Number of files: ", length(tmp_df$length / tmp_df$samp_rate)))
cat("Acoustic: ")
tmp_df <- f1_acoustic$file_df
cat(paste0("range (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("Number of files: ", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
cat("Ultrasonic: ")
cat(paste0("\nrange (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("\nNumber of files: ", length(tmp_df$length / tmp_df$samp_rate)))
cat("\nAcoustic: ")
tmp_df <- f1_acoustic$file_df
cat(paste0("\nrange (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("\nNumber of files: ", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
cat("Data (Ultrasonic)")
cat(paste0("\n\trange (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("\n\tNumber of files: ", length(tmp_df$length / tmp_df$samp_rate)))
cat("\nData2 (Acoustic)")
tmp_df <- f1_acoustic$file_df
cat(paste0("\n\trange (s): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("\n\tNumber of files: ", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
print_wavfile_info <- function(acoustic, ultrasonic){
tmp_df <- f1_ultrasonic$file_df
cat("Data (Ultrasonic)")
cat(paste0("\n\trange (seconds): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("\n\tNumber of files: ", length(tmp_df$length / tmp_df$samp_rate)))
cat("\nData2 (Acoustic)")
tmp_df <- f1_acoustic$file_df
cat(paste0("\n\trange (seconds): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("\n\tNumber of files: ", length(tmp_df$length / tmp_df$samp_rate)))
}
folder2
print_wavfile_info(f2_ultrasonic, f2_acoustic)
print_wavfile_info <- function(ultrasonic, acoustic){
tmp_df <- ultrasonic$file_df
cat("Data (Ultrasonic)")
cat(paste0("\n\trange (seconds): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("\n\tNumber of files: ", length(tmp_df$length / tmp_df$samp_rate)))
cat("\nData2 (Acoustic)")
tmp_df <- acoustic$file_df
cat(paste0("\n\trange (seconds): ", paste0(floor(range(tmp_df$length / tmp_df$samp_rate)), collapse='-')))
cat(paste0("\n\tNumber of files: ", length(tmp_df$length / tmp_df$samp_rate)))
}
folder1
print_wavfile_info(f1_ultrasonic, f1_acoustic)
folder2
print_wavfile_info(f2_ultrasonic, f2_acoustic)
folder3
print_wavfile_info(f3_ultrasonic, f3_acoustic)
getwd()
setwd('C:/Users/Anthony/OneDrive - Maynooth University/Documents/GitHub/Personal_Projects/bird_detection_audio')
list.files()
list.files()[400]
list.files()[300]
Sys.glob("y_true*")
today_str <- format(Sys.time(), "%Y%m%d")
Sys.glob(paste0("y_true", today_str, "*"))
Sys.glob("y_true*")
Sys.glob(paste0("y_true", today_str, "*"))
Sys.glob(paste0("y_true", today_str, "*"))
#install.packages("RcppCNPy")
library(RcppCNPy)
y_pred <- npyLoad("y_pred20220126_152914_richfield_shallow_net9Mod_.npy", type="integer")
y_true <- npyLoad("y_true20220126_152914_richfield_shallow_net9Mod_.npy", type="integer")
y_true
history_df <- read.csv("model_history20220126_152914_richfield_shallow_net9Mod_.csv")
history_df
file_str <- "model_history20220126_152914_richfield_shallow_net9Mod_.csv"
grep('richfield_shallow_net', file_str)
gregexpr('richfield_shallow_net', file_str)
file_str[3]
stringr::str_locate(file_str, 'richfield_shallow_net')[,'end']
stringr::str_
stringr::str_length(file_str)
substr(file_str, 50,51)
substr(file_str, 51,51)
as.integer(substr(file_str, 51,51))
string_run_start <- stringr::str_locate(file_str, 'richfield_shallow_net')[,'end'] + 1
as.integer(substr(file_str, string_run_start,string_run_start))
file_str
substring(file_str, 13)
substring(file_str, 14)
stringr::str_locate(substring(file_str, 14), '_')
stringr::str_locate(substring(file_str, 14), '_')
stringr::str_locate(file_str, 14, '_')
stringr::str_locate(file_str, '_')
?stringr::str_locate
substring(file_str, string_run_start+1)
stringr::str_locate(file_str, '_.csv')
file_end <- stringr::str_locate(file_str, '_.csv')
substring(file_str, string_run_start+1, file_end)
substr(file_str, string_run_start+1, file_end)
substr(file_str, string_run_start+1, file_end-1)
library(stringr)
mean(y_pred==y_true)
substring(file_str, 11)
substring(file_str, 14)
str_length('model_history')
gsub(".csv", ".npy", filestr)
gsub(".csv", ".npy", file_str)
read.csv(file_str)
read.csv(file_str)$val_loss
read.csv(file_str)$val_loss[-1]
read.csv(file_str)$val_loss[10]
read.csv(file_str)$val_accuracy[10]
Sys.glob(paste0("model_history", today_str, "*"))
history_list <- Sys.glob(paste0("model_history", today_str, "*"))
for(f in history_list){
row <- get_row_info <- function(f)
result_df <- rbind(result_df, row)
}
get_row_info <- function(file_str){
string_run_start <- str_locate(file_str, 'richfield_shallow_net')[,'end'] + 1
run_id <- as.integer(substr(file_str, string_run_start,string_run_start))
file_end     <- str_locate(file_str, '_.csv')
channels_str <- substr(file_str, string_run_start+1, file_end-1)
#tail_str <- substr(file_str, str_length('model_history')+1)
#tail_str <- gsub(".csv", ".npy", tail_str)
#y_pred <- npyLoad(paste0("y_pred", tail_str), type="integer")
#y_true <- npyLoad(paste0("y_true", tail_str), type="integer")
row <- data.frame(run_id   = run_id,
channels = channels_str,
acc_10   = read.csv(file_str)$val_loss[10],
loss_10  = read.csv(file_str)$val_accuracy[10])
return(row)
}
for(f in history_list){
row <- get_row_info(f)
result_df <- rbind(result_df, row)
}
result_df <- data.frame(run_id   = c(),
channels = c(),
acc_10   = c())
get_row_info <- function(file_str){
string_run_start <- str_locate(file_str, 'richfield_shallow_net')[,'end'] + 1
run_id <- as.integer(substr(file_str, string_run_start,string_run_start))
file_end     <- str_locate(file_str, '_.csv')
channels_str <- substr(file_str, string_run_start+1, file_end-1)
#tail_str <- substr(file_str, str_length('model_history')+1)
#tail_str <- gsub(".csv", ".npy", tail_str)
#y_pred <- npyLoad(paste0("y_pred", tail_str), type="integer")
#y_true <- npyLoad(paste0("y_true", tail_str), type="integer")
row <- data.frame(run_id   = run_id,
channels = channels_str,
acc_10   = read.csv(file_str)$val_loss[10],
loss_10  = read.csv(file_str)$val_accuracy[10])
return(row)
}
for(f in history_list){
row <- get_row_info(f)
result_df <- rbind(result_df, row)
}
result_df
library(ggplot2)
ggplot(result_df) + geom_boxplot(aes(channels, acc_10))
ggplot(result_df) + geom_boxplot(aes(channels, acc_10)) +
theme(axis.text.x = element_text(size=5))
ggplot(result_df) + geom_boxplot(aes(channels, acc_10, color = run_id)) +
theme(axis.text.x = element_text(size=8))
ggplot(result_df) + geom_boxplot(aes(channels, acc_10, color = channels)) +
theme(axis.text.x = element_text(size=8))
ggplot(result_df) + geom_boxplot(aes(channels, acc_10)) +
theme(axis.text.x = element_text(size=8))
ggplot(result_df) + geom_boxplot(aes(channels, acc_10)) +
theme(axis.text.x = element_text(size=7))
result_df <- data.frame(run_id   = c(),
channels = c(),
acc_10   = c())
get_row_info <- function(file_str){
string_run_start <- str_locate(file_str, 'richfield_shallow_net')[,'end'] + 1
run_id <- as.integer(substr(file_str, string_run_start,string_run_start))
file_end     <- str_locate(file_str, '_.csv')
channels_str <- substr(file_str, string_run_start+1, file_end-1)
#tail_str <- substr(file_str, str_length('model_history')+1)
#tail_str <- gsub(".csv", ".npy", tail_str)
#y_pred <- npyLoad(paste0("y_pred", tail_str), type="integer")
#y_true <- npyLoad(paste0("y_true", tail_str), type="integer")
row <- data.frame(run_id   = run_id,
channels = channels_str,
acc_10   = read.csv(file_str)$val_accuracy[10],
loss_10  = read.csv(file_str)$val_loss[10])
return(row)
}
for(f in history_list){
row <- get_row_info(f)
result_df <- rbind(result_df, row)
}
result_df
library(ggplot2)
ggplot(result_df) + geom_boxplot(aes(channels, acc_10)) +
theme(axis.text.x = element_text(size=7))
one.way <- aov(acc_10 ~ channels, data = result_df)
summary(one.way)
