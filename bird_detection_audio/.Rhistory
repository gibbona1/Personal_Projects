#print(seewave::M(tmp_audio))
#print(seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)))
#print(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q)
#print(soundecology::acoustic_diversity(tmp_audio)$adi_left)
#print(soundecology::acoustic_evenness(tmp_audio)$aei_left)
#print(soundecology::bioacoustic_index(tmp_audio)$left_area)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5)),
error = function(e) 0)
df_row <- data.frame(
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)),
q    = qval,
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
#print(df_row)
df <- rbind(df, df_row)
}
df <- data.frame()
for(tfile in tmp_files[44:100]){
#print(tfile)
tmp_audio <- tuneR::readWave(tfile)
#print(seewave::ACI(tmp_audio))
#print(seewave::H(tmp_audio))
#print(seewave::M(tmp_audio))
#print(seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)))
#print(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q)
#print(soundecology::acoustic_diversity(tmp_audio)$adi_left)
#print(soundecology::acoustic_evenness(tmp_audio)$aei_left)
#print(soundecology::bioacoustic_index(tmp_audio)$left_area)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5)),
error = function(e) 0)
df_row <- data.frame(
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)),
q    = qval,
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
print(df_row)
print(df)
df <- rbind(df, df_row)
}
df <- data.frame()
for(tfile in tmp_files[44:100]){
#print(tfile)
tmp_audio <- tuneR::readWave(tfile)
#print(seewave::ACI(tmp_audio))
#print(seewave::H(tmp_audio))
#print(seewave::M(tmp_audio))
#print(seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)))
#print(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q)
#print(soundecology::acoustic_diversity(tmp_audio)$adi_left)
#print(soundecology::acoustic_evenness(tmp_audio)$aei_left)
#print(soundecology::bioacoustic_index(tmp_audio)$left_area)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE),
error = function(e) 0)
df_row <- data.frame(
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)),
q    = qval[1],
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
print(df_row)
print(df)
df <- rbind(df, df_row)
}
for(tfile in tmp_files[44:100]){
#print(tfile)
tmp_audio <- tuneR::readWave(tfile)
#print(seewave::ACI(tmp_audio))
#print(seewave::H(tmp_audio))
#print(seewave::M(tmp_audio))
#print(seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)))
#print(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q)
#print(soundecology::acoustic_diversity(tmp_audio)$adi_left)
#print(soundecology::acoustic_evenness(tmp_audio)$aei_left)
#print(soundecology::bioacoustic_index(tmp_audio)$left_area)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE),
error = function(e) 0)
print(qval)
df_row <- data.frame(
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)),
q    = qval[1],
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
print(df_row)
print(df)
df <- rbind(df, df_row)
}
for(tfile in tmp_files[44:100]){
#print(tfile)
tmp_audio <- tuneR::readWave(tfile)
#print(seewave::ACI(tmp_audio))
#print(seewave::H(tmp_audio))
#print(seewave::M(tmp_audio))
#print(seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)))
#print(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q)
#print(soundecology::acoustic_diversity(tmp_audio)$adi_left)
#print(soundecology::acoustic_evenness(tmp_audio)$aei_left)
#print(soundecology::bioacoustic_index(tmp_audio)$left_area)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q,
error = function(e) 0)
print(qval)
df_row <- data.frame(
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)),
q    = qval[1],
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
print(df_row)
print(df)
df <- rbind(df, df_row)
}
df <- data.frame()
for(tfile in tmp_files[44:100]){
#print(tfile)
tmp_audio <- tuneR::readWave(tfile)
#print(seewave::ACI(tmp_audio))
#print(seewave::H(tmp_audio))
#print(seewave::M(tmp_audio))
#print(seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)))
#print(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q)
#print(soundecology::acoustic_diversity(tmp_audio)$adi_left)
#print(soundecology::acoustic_evenness(tmp_audio)$aei_left)
#print(soundecology::bioacoustic_index(tmp_audio)$left_area)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q,
error = function(e) 0)
print(qval)
df_row <- data.frame(
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)),
q    = qval[1],
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
print(df_row)
print(df)
df <- rbind(df, df_row)
}
library(seewave)
#install.packages('soundecology')
library(soundecology)
library(stringr)
getwd()
setwd('C:/Users/Anthony/Documents/GitHub/Personal_Projects/bird_detection_audio')
folder    <- 'richfield_birds_split'
tmp_files <- Sys.glob(file.path(getwd(),folder,'*','*'))
tmp_files <- tmp_files[str_ends(tmp_files,'wav')]
df <- data.frame()
for(tfile in tmp_files){
tmp_audio <- tuneR::readWave(tfile)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q,
error = function(e) 0)
df_row <- data.frame(
name = tfile,
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)),
q    = qval,
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
df <- rbind(df, df_row)
}
seewave::H(tmp_audio)
qval
seewave::AR(getwd(), datatype="files")
getwd()
Sys.path(getwd(), 'richfield_birds_split')
file.path(getwd(), 'richfield_birds_split')
seewave::AR(file.path(getwd(), 'richfield_birds_split'), datatype="files")
df <- data.frame()
for(tfile in tmp_files){
tmp_audio <- tuneR::readWave(tfile)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q,
error = function(e) NA)
if(length(qval)==0)
qval <- NA
df_row <- data.frame(
name = tfile,
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE)),
q    = qval,
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
df <- rbind(df, df_row)
}
qval
soundecology::bioacoustic_index(tmp_audio)$left_area
soundecology::acoustic_evenness(tmp_audio)$aei_left
soundecology::acoustic_diversity(tmp_audio)$adi_left
seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE))
seewave::soundscapespec(tmp_audio, plot=FALSE)
seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE, biophony=2:7))
seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE, biophony=2:6))
seewave::NDSI(seewave::soundscapespec(tmp_audio, plot=FALSE, biophony=2:5))
NDSI
seewave::soundscapespec(tmp_audio, plot=FALSE)
seewave::soundscapespec(tmp_audio, plot=FALSE)[1:5,2]
seewave::soundscapespec(tmp_audio, plot=FALSE)[2:8,2]
seewave::soundscapespec(tmp_audio, plot=FALSE)[2:7,2]
df
seewave::soundscapespec(tmp_audio, plot=FALSE)
nrow(seewave::soundscapespec(tmp_audio, plot=FALSE))
for(tfile in tmp_files[-(1:1000)]){
tmp_audio <- tuneR::readWave(tfile)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q,
error = function(e) NA)
if(length(qval)==0)
qval <- NA
s_spec <- seewave::soundscapespec(tmp_audio, plot=FALSE)
df_row <- data.frame(
name = tfile,
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(s_spec, biophony = 2:nrow(s_spec)),
q    = qval,
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
df <- rbind(df, df_row)
}
for(tfile in tmp_files[1000:1100]){
tmp_audio <- tuneR::readWave(tfile)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q,
error = function(e) NA)
if(length(qval)==0)
qval <- NA
s_spec <- seewave::soundscapespec(tmp_audio, plot=FALSE)
df_row <- data.frame(
name = tfile,
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(s_spec, biophony = 2:nrow(s_spec)),
q    = qval,
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
df <- rbind(df, df_row)
}
df
unique(df$name)
length(unique(df$name))
df[duplicated(df)]
df[duplicated(df),]
nrow(df[duplicated(df),])
df_unique <- df[!duplicated(df),]
setdiff(df_unique$name, tmp_files)
df_unique$name
tmp_files
df_unique$name
setdiff(tmp_files, df_unique$name)
rest_files <- setdiff(tmp_files, df_unique$name)
df <- df[!duplicated(df),]
for(tfile in rest_files){
tmp_audio <- tuneR::readWave(tfile)
qval <- tryCatch(seewave::Q(seewave::spec(tmp_audio, plot=FALSE, dB="max0", at = 0.5), plot = FALSE)$Q,
error = function(e) NA)
if(length(qval)==0)
qval <- NA
s_spec <- seewave::soundscapespec(tmp_audio, plot=FALSE)
df_row <- data.frame(
name = tfile,
aci  = seewave::ACI(tmp_audio),
h    = seewave::H(tmp_audio),
m    = seewave::M(tmp_audio),
ndsi = seewave::NDSI(s_spec, biophony = 2:nrow(s_spec)),
q    = qval,
adi  = soundecology::acoustic_diversity(tmp_audio)$adi_left,
aei  = soundecology::acoustic_evenness(tmp_audio)$aei_left,
bi   = soundecology::bioacoustic_index(tmp_audio)$left_area
)
df <- rbind(df, df_row)
}
nrow(df)
length(tmp_files)
#df <-
df[!duplicated(df),]
#df <-
nrow(df[!duplicated(df),])
#df <-
nrow(df[!duplicated(df$name),])
df <- df[!duplicated(df$name),]
df
nrow(df)
write.csv2(df, "richfield_bioacoustic_indices.csv")
write.csv(df, "richfield_bioacoustic_indices.csv")
getwd()
setwd('C:/Users/Anthony/Documents/GitHub/Personal_Projects/bird_detection_audio')
comp_folder <- '20220524_comparison_results2'
comp_list   <- list.files(comp_folder)
comp_list
library(stringr)
#stringr::str_ends()
metric_data <- c()
for(str_file in comp_list){
if(str_ends(str_file, 'metric_df.csv'))
metric_data <- c(metric_data, str_file)
}
metric_data
auc_data <- c()
for(str_file in comp_list){
if(str_ends(str_file, 'auc_df.csv'))
auc_data <- c(auc_data, str_file)
}
comb_metric_data <- data.frame()
for(metric_file in metric_data){
df <- read.csv(file.path(comp_folder, metric_file))
if(nrow(df)>1){
df$X <- df$X[1]
df$model <- df$model[df$model != ""][1]
df <- df[1,]
}
comb_metric_data <- rbind(comb_metric_data, df)
}
comb_auc_data <- data.frame()
for(auc_file in auc_data){
df <- read.csv(file.path(comp_folder, auc_file))
if(nrow(df)>1){
df$X <- df$X[1]
df$model <- df$model[df$model != ""][1]
df <- df[1,]
}
comb_auc_data <- rbind(comb_auc_data, df)
}
auc_data
comb_metric_data
comb_auc_data
library(knitr)
#install.packages("kableExtra")
library(kableExtra)
library(dplyr)
library(ggplot2)
library(Rmisc)
comb_metric_data
comb_metric_data[comb_metric_data$model=="smallcnn",]
group_df <- comb_metric_data %>%
group_by(model) %>%
dplyr::summarise(avg_acc = mean(top_1_acc),
lci_acc = CI(top_1_acc)[3],
lui_acc = CI(top_1_acc)[1],
#avg_acc5 = mean(top_5_acc),
#lci_acc5 = CI(top_5_acc)[3],
#lui_acc5 = CI(top_5_acc)[1],
avg_prec = mean(precision),
lci_prec = CI(precision)[3],
lui_prec = CI(precision)[1],
avg_f1 = mean(f1),
lci_f1 = CI(f1)[3],
lui_f1 = CI(f1)[1])
group_df
#group_df |> lapply(\(x){ifelse(x == max(x), cell_spec(round(x, 2), bold = TRUE), round(x, 2))}) |> cbind(df2) |>
group_df %>%
mutate(across(c(avg_acc, avg_prec, avg_f1), ~cell_spec(., bold = . == max(.)))) %>%
kable(escape = FALSE, booktabs = TRUE, digits=3,
col.names = c("model", rep(c("mean", "Lower CI", "Upper CI"), 3))) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
) %>%
add_header_above(c( '', Accuracy1 = 3, Precision = 3, F1 = 3))
library(ggplot2)
comb_metric_data %>%
#filter(model %in% c('resnet50', 'resnet50_concat', 'vgg19', 'vgg19_concat')) %>%
ggplot() +
geom_boxplot(aes(model, top_1_acc)) +
#theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Test Accuracy") +
theme(legend.position = "none")
comp_folder <- '20220524_comparison_results3'
comp_list   <- list.files(comp_folder)
comp_list
library(stringr)
#stringr::str_ends()
metric_data <- c()
for(str_file in comp_list){
if(str_ends(str_file, 'metric_df.csv'))
metric_data <- c(metric_data, str_file)
}
metric_data
auc_data <- c()
for(str_file in comp_list){
if(str_ends(str_file, 'auc_df.csv'))
auc_data <- c(auc_data, str_file)
}
comb_metric_data <- data.frame()
for(metric_file in metric_data){
df <- read.csv(file.path(comp_folder, metric_file))
if(nrow(df)>1){
df$X <- df$X[1]
df$model <- df$model[df$model != ""][1]
df <- df[1,]
}
comb_metric_data <- rbind(comb_metric_data, df)
}
comb_auc_data <- data.frame()
for(auc_file in auc_data){
df <- read.csv(file.path(comp_folder, auc_file))
if(nrow(df)>1){
df$X <- df$X[1]
df$model <- df$model[df$model != ""][1]
df <- df[1,]
}
comb_auc_data <- rbind(comb_auc_data, df)
}
auc_data
comb_metric_data
comb_auc_data
library(knitr)
#install.packages("kableExtra")
library(kableExtra)
library(dplyr)
library(ggplot2)
library(Rmisc)
comb_metric_data
comb_metric_data[comb_metric_data$model=="smallcnn",]
group_df <- comb_metric_data %>%
group_by(model) %>%
dplyr::summarise(avg_acc = mean(top_1_acc),
lci_acc = CI(top_1_acc)[3],
lui_acc = CI(top_1_acc)[1],
#avg_acc5 = mean(top_5_acc),
#lci_acc5 = CI(top_5_acc)[3],
#lui_acc5 = CI(top_5_acc)[1],
avg_prec = mean(precision),
lci_prec = CI(precision)[3],
lui_prec = CI(precision)[1],
avg_f1 = mean(f1),
lci_f1 = CI(f1)[3],
lui_f1 = CI(f1)[1])
group_df
#group_df |> lapply(\(x){ifelse(x == max(x), cell_spec(round(x, 2), bold = TRUE), round(x, 2))}) |> cbind(df2) |>
group_df %>%
mutate(across(c(avg_acc, avg_prec, avg_f1), ~cell_spec(., bold = . == max(.)))) %>%
kable(escape = FALSE, booktabs = TRUE, digits=3,
col.names = c("model", rep(c("mean", "Lower CI", "Upper CI"), 3))) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
) %>%
add_header_above(c( '', Accuracy1 = 3, Precision = 3, F1 = 3))
library(ggplot2)
comb_metric_data %>%
#filter(model %in% c('resnet50', 'resnet50_concat', 'vgg19', 'vgg19_concat')) %>%
ggplot() +
geom_boxplot(aes(model, top_1_acc)) +
#theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Test Accuracy") +
theme(legend.position = "none")
ggplot(comb_auc_data) +
geom_boxplot(aes(model, auc_CommonKestrel)) +
#theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Best AUC") +
theme(legend.position = "none")
comb_metric_data %>%
#filter(model %in% c('resnet50', 'resnet50_concat', 'vgg19', 'vgg19_concat')) %>%
ggplot() +
geom_boxplot(aes(model, top_1_acc)) +
#theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Test Accuracy") +
theme(legend.position = "none")
read.csv("richfield_bioacoustic_indices.csv")
df <- read.csv("richfield_bioacoustic_indices.csv")
unique(df$name)
length(unique(df$name))
str_split(df$name, '/')
sapply(df$name, function(x) paste(str_split(x, '/')[8:10], sep = '\\'))
#write.csv(df, "richfield_bioacoustic_indices.csv")
paste(str_split(df$name[1], '/')[8:10], sep = '\\')
#write.csv(df, "richfield_bioacoustic_indices.csv")
paste(str_split(df$name[1], '/'), sep = '\\')
str_split(df$name[1], '/')
str_split(df$name[1], '/')[[1]][8:10]
sapply(df$name, function(x) paste(str_split(x, '/')[[1]][8:10], collapse = '\\'))
unique(sapply(df$name, function(x) paste(str_split(x, '/')[[1]][8:10], collapse = '\\')))
