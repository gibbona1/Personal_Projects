})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goLink", "Go!"),
radioGroupButtons("buttons", "Buttons", choices = c("a", "b", "c")),
tags$style("#goLink {
background-color:black;
color:yellow;
font-size:20rem;}
#goLink:hover {
background-color: yellow;
color:black;}"))
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goLink. This will run once initially,
# because the value changes from NULL to 0.
#input$goLink
# Use isolate() to avoid dependency on input$obs
#dist <- isolate(rnorm(input$obs))
#hist(dist)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goLink", "Go!"),
radioGroupButtons("buttons", "Buttons", choices = c("a", "b", "c")),
tags$style("#goLink {
background-color:black;
color:yellow;
font-size:20rem;}
#goLink:hover {
background-color: yellow;
color:black;}"),
tags$style("#buttons {
background-color:black;
color:yellow;
font-size:20rem;}
#buttons:hover {
background-color: yellow;
color:black;}"))
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goLink. This will run once initially,
# because the value changes from NULL to 0.
#input$goLink
# Use isolate() to avoid dependency on input$obs
#dist <- isolate(rnorm(input$obs))
#hist(dist)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goLink", "Go!"),
radioGroupButtons("buttons", "Buttons", choices = c("a", "b", "c")),
tags$style("#goLink {
background-color:black;
color:yellow;
font-size:20rem;}
#goLink:hover {
background-color: yellow;
color:black;}"),
tags$style("#buttons[value=a] {
background-color:black;
color:yellow;}
#buttons[value=a]:hover {
background-color: yellow;
color:black;}"))
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goLink. This will run once initially,
# because the value changes from NULL to 0.
#input$goLink
# Use isolate() to avoid dependency on input$obs
#dist <- isolate(rnorm(input$obs))
#hist(dist)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goLink", "Go!"),
radioGroupButtons("buttons", "Buttons", choices = c("a", "b", "c")),
tags$style("#goLink {
background-color:black;
color:yellow;
font-size:20rem;}
#goLink:hover {
background-color: yellow;
color:black;}"),
tags$style("#buttons {
background-color:black;
color:yellow;}
#buttons:hover {
background-color: yellow;
color:black;}"))
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goLink. This will run once initially,
# because the value changes from NULL to 0.
#input$goLink
# Use isolate() to avoid dependency on input$obs
#dist <- isolate(rnorm(input$obs))
#hist(dist)
})
}
shinyApp(ui, server)
runApp('GitHub/audio_labeller')
radioGroupButtons
markup_buttons_radio
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
library(shiny)
ui <- pageWithSidebar(
headerPanel("renderImage example"),
sidebarPanel(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000,  value = 500)
),
mainPanel(
# Use imageOutput to place the image on the page
imageOutput("myImage")
)
)
server <- function(input, output, session) {
output$myImage <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- tempfile(fileext = '.png')
# Generate the PNG
png(outfile, width = 400, height = 300)
hist(rnorm(input$obs), main = "Generated in renderImage()")
dev.off()
# Return a list containing the filename
list(src = outfile,
contentType = 'image/png',
width = 400,
height = 300,
alt = "This is alternate text")
}, deleteFile = TRUE)
}
shinyApp(ui, server)
spectro(tico)
data(tico)
spectro(tico)
spectro(tico, plot=FALSE)
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
JS('window.innerWidth')
install.packages("htmlwidgets")
install.packages("htmlwidgets")
library(htmlwidgets)
JS('window.innerWidth')
shiny::runApp('GitHub/audio_labeller')
JS('window.innerWidth')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
spec_plot <- ggplot(df) +
stat_summary_2d(bins = c(100,100),
#geom_raster(
aes(x    = time,
y    = frequency,
fill = amplitude),
alpha       = df$freq_select,
interpolate = TRUE
) +
xlab("Time (s)") +
ylab("Frequency (kHz)") +
scale_fill_gradientn(name     = "Amplitude\n(dB)\n",
colours  = sel_col,
limits   = c(-96,96),
na.value = sel_col[1]) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0),
breaks = y_breaks,
labels = paste0(paste0(rep(" ", length_ylabs$spec), collapse=''),
y_breaks, "kHz")
) +
hot_theme_grid
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
install.packages("ggrastr")
library(ggrastr)
shiny::runApp('GitHub/audio_labeller')
any(is.null("a", NULL))
any(is.null(c("a", NULL)))
is.null(c("a", NULL))
is.na(c("a", NULL))
sapply(c("a", NULL), is.null)
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
input$frequency_range
all(input$frequency_range==0)
identical(input$frequency_range)
all.equal(input$frequency_range)
var(input$frequency_range)
var(input$frequency_range)==0
runApp('GitHub/audio_labeller')
runApp()
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
range(tmp_spec$freq)
min(tmp_spec$freq)
pretty(range(tmp_spec$freq))
range(pretty(tmp_spec$freq))
shiny::runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
profvis(runApp(), prof_output = file.path(getwd(),'profiling'))
library(ggplot2)
#library(ggrastr)
library(shiny)
library(shinyjs)
library(shinyBS)
library(shinyFiles)
library(shinythemes)
library(shinydashboard)
library(shinyWidgets)
library(imola)
library(tuneR)
library(seewave) # for spectrogram
#library(plotly)
#library(oce)
library(viridis)
#library(grid)
#library(gridExtra)
#library(cowplot) # to get legend
library(profvis) # for checking code performance
library(dplyr)
library(stringr)
source('plot_helpers.R')
shiny::runApp('GitHub/audio_labeller')
getwd()
shiny::runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp()
runApp()
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
lab_file <- labs_filename()
runApp('GitHub/audio_labeller')
labs_filename()
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
lab_df
runApp('GitHub/audio_labeller')
lab_df
runApp('GitHub/audio_labeller')
lab_df
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
lab_df
input$spec_labs
lab_df
runApp('GitHub/audio_labeller')
lab_df
runApp('GitHub/audio_labeller')
lab_df
runApp('GitHub/audio_labeller')
lab_df
lab_df[in_label_box(lab_df, point),]
runApp('GitHub/audio_labeller')
runApp('GitHub/audio_labeller')
file_list
file_list <- list.files('www/')
file_list
getwd()
getwd()
setwd('C:/Users/Anthony/OneDrive - Maynooth University/Documents/GitHub/Personal_Projects/bird_detection_audio')
setwd('C:/Users/Anthony/Documents/GitHub/Personal_Projects/bird_detection_audio')
comp_folder <- '20220307_comparison_results'
comp_list   <- list.files(comp_folder)
library(stringr)
new_results_start <- which(str_starts(comp_list, '20220302_16'))[1]
comp_list <- comp_list[new_results_start:length(comp_list)]
#stringr::str_ends()
metric_data <- c()
for(str_file in comp_list){
if(str_ends(str_file, 'metric_df.csv'))
metric_data <- c(metric_data, str_file)
}
metric_data
auc_data <- c()
for(str_file in comp_list){
if(str_ends(str_file, 'auc_df.csv'))
auc_data <- c(auc_data, str_file)
}
comb_metric_data <- data.frame()
for(metric_file in metric_data){
df <- read.csv(file.path(comp_folder, metric_file))
if(nrow(df)>1){
df$X <- df$X[1]
df$model <- df$model[1]
df <- df[2,]
}
comb_metric_data <- rbind(comb_metric_data, df)
}
comb_auc_data <- data.frame()
for(auc_file in auc_data){
df <- read.csv(file.path(comp_folder, auc_file))
if(nrow(df)>1){
df$X <- df$X[1]
df$model <- df$model[1]
df <- df[2,]
}
comb_auc_data <- rbind(comb_auc_data, df)
}
auc_data
comb_metric_data
comb_auc_data
library(knitr)
#install.packages("kableExtra")
library(kableExtra)
comb_metric_data
comb_metric_data[comb_metric_data$model=="smallcnn",]
group_df <- comb_metric_data %>%
group_by(model) %>%
dplyr::summarise(avg_acc = mean(top_1_acc),
lci_acc = CI(top_1_acc)[3],
lui_acc = CI(top_1_acc)[1],
avg_acc5 = mean(top_5_acc),
lci_acc5 = CI(top_5_acc)[3],
lui_acc5 = CI(top_5_acc)[1],
avg_prec = mean(precision),
lci_prec = CI(precision)[3],
lui_prec = CI(precision)[1],
avg_f1 = mean(f1),
lci_f1 = CI(f1)[3],
lui_f1 = CI(f1)[1])
library(dplyr)
library(ggplot2)
comb_metric_data
comb_metric_data[comb_metric_data$model=="smallcnn",]
group_df <- comb_metric_data %>%
group_by(model) %>%
dplyr::summarise(avg_acc = mean(top_1_acc),
lci_acc = CI(top_1_acc)[3],
lui_acc = CI(top_1_acc)[1],
avg_acc5 = mean(top_5_acc),
lci_acc5 = CI(top_5_acc)[3],
lui_acc5 = CI(top_5_acc)[1],
avg_prec = mean(precision),
lci_prec = CI(precision)[3],
lui_prec = CI(precision)[1],
avg_f1 = mean(f1),
lci_f1 = CI(f1)[3],
lui_f1 = CI(f1)[1])
comb_metric_data
group_df <- comb_metric_data %>%
group_by(model) %>%
dplyr::summarise(avg_acc = mean(top_1_acc),
lci_acc = CI(top_1_acc)[3],
lui_acc = CI(top_1_acc)[1],
avg_acc5 = mean(top_5_acc),
lci_acc5 = CI(top_5_acc)[3],
lui_acc5 = CI(top_5_acc)[1],
avg_prec = mean(precision),
lci_prec = CI(precision)[3],
lui_prec = CI(precision)[1],
avg_f1 = mean(f1),
lci_f1 = CI(f1)[3],
lui_f1 = CI(f1)[1])
library(Rmisc)
comb_metric_data
comb_metric_data[comb_metric_data$model=="smallcnn",]
group_df <- comb_metric_data %>%
group_by(model) %>%
dplyr::summarise(avg_acc = mean(top_1_acc),
lci_acc = CI(top_1_acc)[3],
lui_acc = CI(top_1_acc)[1],
avg_acc5 = mean(top_5_acc),
lci_acc5 = CI(top_5_acc)[3],
lui_acc5 = CI(top_5_acc)[1],
avg_prec = mean(precision),
lci_prec = CI(precision)[3],
lui_prec = CI(precision)[1],
avg_f1 = mean(f1),
lci_f1 = CI(f1)[3],
lui_f1 = CI(f1)[1])
#group_df |> lapply(\(x){ifelse(x == max(x), cell_spec(round(x, 2), bold = TRUE), round(x, 2))}) |> cbind(df2) |>
group_df %>%
mutate(across(c(avg_acc, avg_acc5, avg_prec, avg_f1), ~cell_spec(., bold = . == max(.)))) %>%
kable(escape = FALSE, booktabs = TRUE, digits=3,
col.names = c("model", rep(c("mean", "Lower CI", "Upper CI"), 4))) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
) %>%
add_header_above(c( '', Accuracy1 = 3, Accuracy5 = 3, Precision = 3, F1 = 3))
library(ggplot2)
ggplot(comb_metric_data) +
geom_boxplot(aes(model, top_1_acc)) +
#theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Test Accuracy") +
theme(legend.position = "none")
comb_metric_data
getwd()
setwd('C:/Users/Anthony/Documents/GitHub/Personal_Projects/bird_detection_audio')
comp_folder <- '20220307_comparison_results'
comp_list   <- list.files(comp_folder)
library(stringr)
new_results_start <- which(str_starts(comp_list, '20220302_16'))[1]
comp_list <- comp_list[new_results_start:length(comp_list)]
#stringr::str_ends()
metric_data <- c()
for(str_file in comp_list){
if(str_ends(str_file, 'metric_df.csv'))
metric_data <- c(metric_data, str_file)
}
metric_data
auc_data <- c()
for(str_file in comp_list){
if(str_ends(str_file, 'auc_df.csv'))
auc_data <- c(auc_data, str_file)
}
comb_metric_data <- data.frame()
for(metric_file in metric_data){
df <- read.csv(file.path(comp_folder, metric_file))
if(nrow(df)>1){
df$X <- df$X[1]
df$model <- df$model[1]
df <- df[2,]
}
comb_metric_data <- rbind(comb_metric_data, df)
}
comb_auc_data <- data.frame()
for(auc_file in auc_data){
df <- read.csv(file.path(comp_folder, auc_file))
if(nrow(df)>1){
df$X <- df$X[1]
df$model <- df$model[1]
df <- df[2,]
}
comb_auc_data <- rbind(comb_auc_data, df)
}
auc_data
comb_metric_data
comb_auc_data
library(knitr)
#install.packages("kableExtra")
library(kableExtra)
library(dplyr)
library(ggplot2)
library(Rmisc)
comb_metric_data
comb_metric_data[comb_metric_data$model=="smallcnn",]
group_df <- comb_metric_data %>%
group_by(model) %>%
dplyr::summarise(avg_acc = mean(top_1_acc),
lci_acc = CI(top_1_acc)[3],
lui_acc = CI(top_1_acc)[1],
avg_acc5 = mean(top_5_acc),
lci_acc5 = CI(top_5_acc)[3],
lui_acc5 = CI(top_5_acc)[1],
avg_prec = mean(precision),
lci_prec = CI(precision)[3],
lui_prec = CI(precision)[1],
avg_f1 = mean(f1),
lci_f1 = CI(f1)[3],
lui_f1 = CI(f1)[1])
#group_df |> lapply(\(x){ifelse(x == max(x), cell_spec(round(x, 2), bold = TRUE), round(x, 2))}) |> cbind(df2) |>
group_df %>%
mutate(across(c(avg_acc, avg_acc5, avg_prec, avg_f1), ~cell_spec(., bold = . == max(.)))) %>%
kable(escape = FALSE, booktabs = TRUE, digits=3,
col.names = c("model", rep(c("mean", "Lower CI", "Upper CI"), 4))) %>%
kable_styling(
full_width = FALSE,
bootstrap_options = c("striped", "hover", "condensed"),
) %>%
add_header_above(c( '', Accuracy1 = 3, Accuracy5 = 3, Precision = 3, F1 = 3))
library(ggplot2)
ggplot(comb_metric_data) +
geom_boxplot(aes(model, top_1_acc)) +
#theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Test Accuracy") +
theme(legend.position = "none")
ggplot(comb_auc_data) +
geom_boxplot(aes(model, auc_CommonKestrel)) +
#theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Best AUC") +
theme(legend.position = "none")
ggplot(comb_metric_data) +
geom_boxplot(aes(model, top_1_acc)) +
#theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Test Accuracy") +
theme(legend.position = "none")
ggplot(comb_metric_data) +
geom_boxplot(aes(model, top_1_acc)) +
theme(axis.text.x = element_text(size=5)) +
#scale_color_manual(values=c('red'='red', 'black'='black'))+
ylab("Test Accuracy") +
theme(legend.position = "none")
